// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_wedge_RCPPEXPORTS_H_GEN_
#define RCPP_wedge_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace wedge {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("wedge", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("wedge", "wedge_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in wedge");
            }
        }
    }

    inline NumericVector wedgeRcpp(NumericVector a1, NumericVector b1, NumericVector a2, NumericVector b2, int size_vect, double tau, int N, bool lower_tail) {
        typedef SEXP(*Ptr_wedgeRcpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_wedgeRcpp p_wedgeRcpp = NULL;
        if (p_wedgeRcpp == NULL) {
            validateSignature("NumericVector(*wedgeRcpp)(NumericVector,NumericVector,NumericVector,NumericVector,int,double,int,bool)");
            p_wedgeRcpp = (Ptr_wedgeRcpp)R_GetCCallable("wedge", "wedge_wedgeRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_wedgeRcpp(Rcpp::wrap(a1), Rcpp::wrap(b1), Rcpp::wrap(a2), Rcpp::wrap(b2), Rcpp::wrap(size_vect), Rcpp::wrap(tau), Rcpp::wrap(N), Rcpp::wrap(lower_tail));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_wedge_RCPPEXPORTS_H_GEN_
